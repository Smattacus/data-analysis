%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Fred\Desktop\Feb-08-2013-05-16-34-PM-0,0-0,000.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2013/02/08 18:02:27

%% Initialize variables.
[flenam, pathn, fi] = uigetfile('*.txt', 'Pick a 8-tip probe data file');
filename = [pathn flenam];
delimiter = '\t';
startRow = 2;

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
LP = dataArray{:, 1};
AP1 = dataArray{:, 2};
AP2 = dataArray{:, 3};
AP3 = dataArray{:, 4};
AP4 = dataArray{:, 5};
AP5 = dataArray{:, 6};
AP6 = dataArray{:, 7};
AP7 = dataArray{:, 8};
AP8 = dataArray{:, 9};

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;
%
G=[AP1 AP2 AP3 AP4 AP5 AP6 AP7 AP8];
clearvars AP1 AP2 AP3 AP4 AP5 AP6 AP7 AP8
si=size(G);
fn=55500/2;%sample frequency of 55.5 kHz
N=si(1)/2; % with two seconds of data N=111000/2=55500
fr=fn*((-N):(N-1))/N;
mG=mean(G);  % This is the mean density (time average)
G=G-ones(si(1),1)*mG; %subtract off the mean from G
sG=std(G);   % This is the RMS fluctuation 
% [U,S,V] = svd(G,'econ');                    %try an svd filter
% s=diag(S);
% figure(1); plot(s,'*');xlabel('svd mode number')
% svdfil=input('SVD mode cut off (between 2 and 9)');
% if svdfil<9 ; s(svdfil:end)=0; end
% S=diag(s);
% G=U*S*V'; %reconstruct the filtered array G
%
c1=xcorr(G(:,1),'unbiased');
c2=xcorr(G(:,1),G(:,2),'unbiased');
c3=xcorr(G(:,1),G(:,3),'unbiased');
c4=xcorr(G(:,1),G(:,4),'unbiased');
c5=xcorr(G(:,1),G(:,5),'unbiased');
c6=xcorr(G(:,1),G(:,6),'unbiased');
c7=xcorr(G(:,1),G(:,7),'unbiased');
c8=xcorr(G(:,1),G(:,8),'unbiased');
t=(-110999:110999)/55500;
tc=0.01; %filter width (should be longer than the correlation time);
[f,g1]=spec(exp(-(t/tc).^2/2).*c1',1/55500);
[f,g2]=spec(exp(-(t/tc).^2/2).*c2',1/55500);
figure(1)
semilogy(f,abs(g1).^2,f,abs(g2).^2)
xlabel('frequency (Hz)')
ylabel('Power Spectrum')
title(['8-tip probe, filter tc=' num2str(tc) '(s)'])
legend('probe 1 auto','probes 1, 2 cross')
%Make an array of windowed cross-correlation functions between probes
C=[exp(-(t'/tc).^2/2).*c1 exp(-(t'/tc).^2/2).*c2 ...
exp(-(t'/tc).^2/2).*c3 exp(-(t'/tc).^2/2).*c4 ...
exp(-(t'/tc).^2/2).*c5 exp(-(t'/tc).^2/2).*c6 ...
exp(-(t'/tc).^2/2).*c7 exp(-(t'/tc).^2/2).*c8]; 
H=fft2(C(111000/2+(1:111000),:)-ones(si(1),1)*mean(C(111000/2+(1:111000),:)));
Q=fftshift(log(abs(H).^2));%natural log scale power spectrum
figure(2)
%contour(-4:3,fr(56002:61000),2*Q(56002:61000,:))
mesh(-4:3,fr(56002:end),Q(56002:end,:))
title('Spectral wave power from xcorr')
ylabel('Frequency (Hz)')
xlabel('mode number')
%
 